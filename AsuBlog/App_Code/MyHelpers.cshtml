@using AsuBlog.Models
@using System.Web.Mvc.Html
@using System.Web.Mvc
@using System.Web.Routing
@using PagedList.Mvc;

@helper BreadCrumbsHelper(WebViewPage page, RouteCategoryModel categories)
{
  
    CheckCategoryModel(categories, out bool subthemeCategoryIsNull, 
                                   out bool themeCategoryIsNull, 
                                   out bool subtopicCategoryIsNull, 
                                   out bool topicCategoryIsNull);
 
    if (!subthemeCategoryIsNull && !themeCategoryIsNull && !subtopicCategoryIsNull && !topicCategoryIsNull)
    {
        <p>
            @page.Html.ActionLink("Главная", "Index", "Blog") &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog4", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.TopicCategory.Name</a>  &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog3", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug, subtopic = categories.SubtopicCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.SubtopicCategory.Name</a>  &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog2", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug, subtopic = categories.SubtopicCategory.UrlSlug, theme = categories.ThemeCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.ThemeCategory.Name</a>  &raquo;
            @categories.SubthemeCategory.Name
         </p>
    }
    else if (!themeCategoryIsNull && !subtopicCategoryIsNull && !topicCategoryIsNull)
    {
         <p>
            @page.Html.ActionLink("Главная", "Index", "Blog") &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog4", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.TopicCategory.Name</a>  &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog3", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug, subtopic = categories.SubtopicCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.SubtopicCategory.Name</a>  &raquo;
            @categories.ThemeCategory.Name
         </p>
    }
    else if (!subtopicCategoryIsNull && !topicCategoryIsNull)
    {
         <p>
            @page.Html.ActionLink("Главная", "Index", "Blog") &raquo;
            <a href="@UrlHelper.GenerateUrl("Catalog4", "catalog", "Blog", new RouteValueDictionary(new { topic = categories.TopicCategory.UrlSlug }),
            page.Url.RouteCollection, new RequestContext(page.Html.ViewContext.HttpContext, new RouteData()), false)">@categories.TopicCategory.Name</a>  &raquo;
            @categories.SubtopicCategory.Name
         </p>
    }
    else if (!topicCategoryIsNull)
    {
         <p>
            @page.Html.ActionLink("Главная", "Index", "Blog") &raquo;
            @categories.TopicCategory.Name
         </p>
    }
    else
    {
         <p>
            @page.Html.ActionLink("Главная", "Index", "Blog")
         </p>
    }

}

@helper PaginationHelperForCatalog(WebViewPage pageMain, PagedList.IPagedList<Store.DAL.Entities.Post> model,
                                    RouteCategoryModel categorys)
{

    <span>Страница @(model.PageCount < model.PageNumber ? 0 : model.PageNumber) из @model.PageCount </span>
    var pageOption = new PagedListRenderOptions();
    pageOption.MaximumPageNumbersToDisplay = 9;
    CheckCategoryModel(categorys, out bool subthemeCategoryIsNull, 
                                  out bool themeCategoryIsNull, 
                                  out bool subtopicCategoryIsNull, 
                                  out bool topicCategoryIsNull);

    if (!subtopicCategoryIsNull && !topicCategoryIsNull && !themeCategoryIsNull && !subthemeCategoryIsNull)
    {
        @pageMain.Html.PagedListPager(model, page => pageMain.Url.Action("catalog",
           new
           {
               topic = categorys.TopicCategory.UrlSlug,
               subtopic = categorys.SubtopicCategory.UrlSlug,
               theme = categorys.ThemeCategory.UrlSlug,
               subtheme = categorys.SubthemeCategory.UrlSlug,
               page
           }), pageOption);
    }
    else if (!subtopicCategoryIsNull && !topicCategoryIsNull && !themeCategoryIsNull)
    {
        @pageMain.Html.PagedListPager(model, page => pageMain.Url.Action("catalog",
            new
            {
                topic = categorys.TopicCategory.UrlSlug,
                subtopic = categorys.SubtopicCategory.UrlSlug,
                theme = categorys.ThemeCategory.UrlSlug,
                page
            }), pageOption);
    }
    else if (!subtopicCategoryIsNull && !topicCategoryIsNull)
    {
        @pageMain.Html.PagedListPager(model, page => pageMain.Url.Action("catalog", new { topic = categorys.TopicCategory.UrlSlug, subtopic = categorys.SubtopicCategory.UrlSlug, page }), pageOption);
    }
    else if (!topicCategoryIsNull)
    {
        @pageMain.Html.PagedListPager(model, page => pageMain.Url.Action("catalog", new { topic = categorys.TopicCategory.UrlSlug, page }), pageOption);
    }
    else
    {
        @pageMain.Html.PagedListPager(model, page => pageMain.Url.Action("catalog", new { page }));
    }

}

@functions
{   
    static void CheckCategoryModel(RouteCategoryModel categories, out bool subthemeCategoryIsNull, 
                                                                  out bool themeCategoryIsNull, 
                                                                  out bool subtopicCategoryIsNull,
                                                                  out bool topicCategoryIsNull)
    {
        subthemeCategoryIsNull = categories.SubthemeCategory is null;
        themeCategoryIsNull = categories.ThemeCategory is null;
        subtopicCategoryIsNull = categories.SubtopicCategory is null;
        topicCategoryIsNull = categories.TopicCategory is null;
    }
}